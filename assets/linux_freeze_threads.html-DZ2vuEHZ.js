import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as a,f as i}from"./app-Dc7jvRXf.js";const e="/assets/001_paused_mysqld-C3-wrYCO.png",l="/assets/003_paused_mysqld-CoRSnRgH.png",p="/assets/004_paused_mysqld-DmZ_nphj.png",d="/assets/005_paused_mysqld-BSv6db-X.png",t="/assets/007_paused_mysqld-Co2-c2zt.png",r={},c=i(`<h1 id="linux上暂停指定的多个运行线程" tabindex="-1"><a class="header-anchor" href="#linux上暂停指定的多个运行线程"><span>Linux上暂停指定的多个运行线程</span></a></h1><h2 id="开篇问题" tabindex="-1"><a class="header-anchor" href="#开篇问题"><span>开篇问题</span></a></h2><p>有一个Linux的多线程程序，在某一台服务器上运行10天后，该程序进程产生了120个线程，此时业务的性能变得很差(可以容易获取业务性能表现的指标)。 我们检查了同时启动服务的其他10台服务器，这10台服务器的业务表现都正常。 我们使用了各种手段分析排查产生性能下降的原因，但没有找到。 不过经过对比，我们对其中一个业务产生了比较大的怀疑，这个业务本身很独立，别的流程对它没有依赖。 我们怀疑这个业务的线程运行过程中执行了某些特殊代码，对系统整体性能产生了影响。 这个业务一共启动了12个线程，而且这个业务也没有运行时开关。 但是我们不能重启程序，因为担心无法复现问题。 现在，怎么来确认这个怀疑是对的还是错的？</p><h2 id="问题跟踪思路" tabindex="-1"><a class="header-anchor" href="#问题跟踪思路"><span>问题跟踪思路</span></a></h2><p>验证这个猜想大概有这几种途径：</p><ol><li>方法1：看看这个业务的12个线程在干什么？看看有什么异常的系统调用或者影响系统硬件的操作；</li><li>方法2：改变程序的输入，让输入的数据被过滤掉，使这个被怀疑的业务没有数据需要处理；</li><li>方法3：修改运行时的指令码，让这几个线程都退出掉，然后再来分析系统性能表现；</li><li>方法4：我们想办法去复现这个问题，修改业务代码或者调整配置后关闭该业务流程，重启复现；</li><li>方法5：如果能够从外部直接将这业务的所有线程都暂停了，那么再来观测一下系统的性能表现有没有恢复，就能确认怀疑对不对了。</li></ol><p>方法1可以比较容易实施，例如我们可以用gdb/pstack/strace等相应的工具去分析线程的调用栈，但问题是我们对系统的理解大都是不全面的，看到函数调用后也只能是猜想，无法直接证实。 方法2比较间接，如果这个业务本身的代码实现上存在漏洞，例如在没有数据需要处理时也执行各种操作，那么使其无数据输入的方法就无法排除它的嫌疑，而且有时构造特定的输入数据也很困难。 方法3属于Linux的特定产物，我们没有通用的使线程退出的手段，所以想要去修改执行的机器码让线程退出，但这个操作难度较大，而且容易造成程序崩溃，属于风险较高的操作，需要谨慎使用。 方法4有不确定性，有可能需要很长的时间，甚至找不到复现问题的有效手段。 方法5在实施成本就比较低，影响面小，可快速验证猜想，是非常有效的初步手段。</p><p>如果使用方法5快速验证了是这个业务的问题，那么就可以开展下一步，使用方法1在更小的范围内去寻找线索。 如果使用方法5验证的结果是系统的性能没有受到影响，那么我们的怀疑就不成立了，需要继续努力寻找其他线索了，即便如此，我们也只是支付了很小的代价而已，只是暂停了一小会儿线程，出问题的现场环境大概率还存在，还可以接着分析。</p><p>既然方法5是有效的手段，那么我们如何实施？即，我们如何在Linux上仅仅暂停一个进程中的一部分线程的运行？</p><p>说实话，这个问题能难倒一大片经验丰富的工程师。</p><h2 id="使用gdb暂停指定的几个线程" tabindex="-1"><a class="header-anchor" href="#使用gdb暂停指定的几个线程"><span>使用gdb暂停指定的几个线程</span></a></h2><p>我们猜想gdb应该具有这个能力。 但是，你在浏览器中去寻找“如何使用gdb暂停几个线程时”，你就会发现，这个问题好像大家不怎么会遇到。 连广受好评的《100个gdb小技巧》中也没有记录如何达成这个目的。 经过几番探索后，找到了方法，这里分享给大家。 方法出奇的简单，就是使用gdb的attach命令。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>attach process-id</span></span>
<span class="line"><span>This command attaches to a running process—one that was started outside GDB. (info files shows your active targets.) The command takes as argument a process ID. The usual way to find out the process-id of a Unix process is with the ps utility, or with the ‘jobs -l’ shell command.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们容易被这个“process-id”误导了，以为只能传入进程ID，实则不然。</p><p>以暂停mysqld为例，如下是mysqld的线程情况： <img src="`+e+`" alt="001_paused_mysqld" loading="lazy"></p><p>现在，我们暂停线程3697，像这样：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>[root@localhost tmp]# gdb -q --pid=3697</span></span>
<span class="line"><span>Attaching to process 3697</span></span>
<span class="line"><span>Reading symbols from /usr/sbin/mysqld...</span></span>
<span class="line"><span>Reading symbols from /lib64/libpthread.so.0...</span></span>
<span class="line"><span>(No debugging symbols found in /lib64/libpthread.so.0)</span></span>
<span class="line"><span>[Thread debugging using libthread_db enabled]</span></span>
<span class="line"><span>Using host libthread_db library &quot;/lib64/libthread_db.so.1&quot;.</span></span>
<span class="line"><span>Reading symbols from /lib64/libaio.so.1...</span></span>
<span class="line"><span>Reading symbols from .gnu_debugdata for /lib64/libaio.so.1...</span></span>
<span class="line"><span>(No debugging symbols found in .gnu_debugdata for /lib64/libaio.so.1)</span></span>
<span class="line"><span>Reading symbols from /lib64/libnuma.so.1...</span></span>
<span class="line"><span>Reading symbols from .gnu_debugdata for /lib64/libnuma.so.1...</span></span>
<span class="line"><span>(No debugging symbols found in .gnu_debugdata for /lib64/libnuma.so.1)</span></span>
<span class="line"><span>Reading symbols from /lib64/libcrypt.so.1...</span></span>
<span class="line"><span>(No debugging symbols found in /lib64/libcrypt.so.1)</span></span>
<span class="line"><span>Reading symbols from /lib64/libdl.so.2...</span></span>
<span class="line"><span>(No debugging symbols found in /lib64/libdl.so.2)</span></span>
<span class="line"><span>Reading symbols from /lib64/libstdc++.so.6...</span></span>
<span class="line"><span>(No debugging symbols found in /lib64/libstdc++.so.6)</span></span>
<span class="line"><span>Reading symbols from /lib64/libm.so.6...</span></span>
<span class="line"><span>(No debugging symbols found in /lib64/libm.so.6)</span></span>
<span class="line"><span>Reading symbols from /lib64/libgcc_s.so.1...</span></span>
<span class="line"><span>(No debugging symbols found in /lib64/libgcc_s.so.1)</span></span>
<span class="line"><span>Reading symbols from /lib64/libc.so.6...</span></span>
<span class="line"><span>(No debugging symbols found in /lib64/libc.so.6)</span></span>
<span class="line"><span>Reading symbols from /lib64/ld-linux-x86-64.so.2...</span></span>
<span class="line"><span>(No debugging symbols found in /lib64/ld-linux-x86-64.so.2)</span></span>
<span class="line"><span>Reading symbols from /lib64/libfreebl3.so...</span></span>
<span class="line"><span>Reading symbols from .gnu_debugdata for /lib64/libfreebl3.so...</span></span>
<span class="line"><span>(No debugging symbols found in .gnu_debugdata for /lib64/libfreebl3.so)</span></span>
<span class="line"><span>Reading symbols from /lib64/libnss_files.so.2...</span></span>
<span class="line"><span>(No debugging symbols found in /lib64/libnss_files.so.2)</span></span>
<span class="line"><span>0x00007f453f4bf644 in __io_getevents_0_4 () from /lib64/libaio.so.1</span></span>
<span class="line"><span>(gdb)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者像这样：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>[root@localhost tmp]# gdb -q</span></span>
<span class="line"><span>(gdb) attach 3697</span></span>
<span class="line"><span>Attaching to process 3697</span></span>
<span class="line"><span>Reading symbols from /usr/sbin/mysqld...</span></span>
<span class="line"><span>Reading symbols from /lib64/libpthread.so.0...</span></span>
<span class="line"><span>(No debugging symbols found in /lib64/libpthread.so.0)</span></span>
<span class="line"><span>[Thread debugging using libthread_db enabled]</span></span>
<span class="line"><span>Using host libthread_db library &quot;/lib64/libthread_db.so.1&quot;.</span></span>
<span class="line"><span>Reading symbols from /lib64/libaio.so.1...</span></span>
<span class="line"><span>Reading symbols from .gnu_debugdata for /lib64/libaio.so.1...</span></span>
<span class="line"><span>(No debugging symbols found in .gnu_debugdata for /lib64/libaio.so.1)</span></span>
<span class="line"><span>Reading symbols from /lib64/libnuma.so.1...</span></span>
<span class="line"><span>Reading symbols from .gnu_debugdata for /lib64/libnuma.so.1...</span></span>
<span class="line"><span>(No debugging symbols found in .gnu_debugdata for /lib64/libnuma.so.1)</span></span>
<span class="line"><span>Reading symbols from /lib64/libcrypt.so.1...</span></span>
<span class="line"><span>(No debugging symbols found in /lib64/libcrypt.so.1)</span></span>
<span class="line"><span>Reading symbols from /lib64/libdl.so.2...</span></span>
<span class="line"><span>(No debugging symbols found in /lib64/libdl.so.2)</span></span>
<span class="line"><span>Reading symbols from /lib64/libstdc++.so.6...</span></span>
<span class="line"><span>(No debugging symbols found in /lib64/libstdc++.so.6)</span></span>
<span class="line"><span>Reading symbols from /lib64/libm.so.6...</span></span>
<span class="line"><span>(No debugging symbols found in /lib64/libm.so.6)</span></span>
<span class="line"><span>Reading symbols from /lib64/libgcc_s.so.1...</span></span>
<span class="line"><span>(No debugging symbols found in /lib64/libgcc_s.so.1)</span></span>
<span class="line"><span>Reading symbols from /lib64/libc.so.6...</span></span>
<span class="line"><span>(No debugging symbols found in /lib64/libc.so.6)</span></span>
<span class="line"><span>Reading symbols from /lib64/ld-linux-x86-64.so.2...</span></span>
<span class="line"><span>(No debugging symbols found in /lib64/ld-linux-x86-64.so.2)</span></span>
<span class="line"><span>Reading symbols from /lib64/libfreebl3.so...</span></span>
<span class="line"><span>Reading symbols from .gnu_debugdata for /lib64/libfreebl3.so...</span></span>
<span class="line"><span>(No debugging symbols found in .gnu_debugdata for /lib64/libfreebl3.so)</span></span>
<span class="line"><span>Reading symbols from /lib64/libnss_files.so.2...</span></span>
<span class="line"><span>(No debugging symbols found in /lib64/libnss_files.so.2)</span></span>
<span class="line"><span>0x00007f453f4bf644 in __io_getevents_0_4 () from /lib64/libaio.so.1</span></span>
<span class="line"><span>(gdb)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样操作后，不要退出gdb，对应的线程就被暂停住了。 注意，gdb启动后不能退出，因为gdb退出后线程就恢复执行了。</p><p>要暂停多个线程就只需要启动多个gdb进程即可。</p><p>在2个gdb进程中分别暂停了线程3697和线程3698后，如下： <img src="`+l+'" alt="003_paused_mysqld.png" loading="lazy"> 可以看到线程3697和3698的状态都变成了“t”。</p><p>但是我要暂停12个线程，岂不是要启动12个gdb？ 对，我没有在gdb中找到方法，目前较新版本的gdb，一个gdb进程也只能同时attach一个线程。 这很不合理呀。</p><p>如果需要暂停的线程多，我们就要换一个工具，这个工具就是fthread，推荐给大家。</p><h2 id="使用fthread暂停指定线程" tabindex="-1"><a class="header-anchor" href="#使用fthread暂停指定线程"><span>使用fthread暂停指定线程</span></a></h2><h3 id="fthread简介" tabindex="-1"><a class="header-anchor" href="#fthread简介"><span>fthread简介</span></a></h3><p>fthread就是用来专门解决批量暂停线程的工具，正好符合我们目前的需求。</p><h3 id="获取fthread" tabindex="-1"><a class="header-anchor" href="#获取fthread"><span>获取fthread</span></a></h3><p>fthread目前只提供了linux x64版本的可执行文件，其二进制下载路径如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>https://github.com/EmptyWatson/fthread/releases/download/v0.0.1-release/fthread_x64</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="使用fthread" tabindex="-1"><a class="header-anchor" href="#使用fthread"><span>使用fthread</span></a></h3><p>其官方文档上有详尽的说明</p><p>我们以暂停mysqld中的几个线程(htop中标黄的线程)为例： <img src="'+p+`" alt="004_paused_mysqld.png" loading="lazy"></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>[root@localhost tmp]# ./fthread_x64 -p $(pidof mysqld)</span></span>
<span class="line"><span>2022-01-29 15:26:02,589 INFO ---------&gt;fthread is starting......</span></span>
<span class="line"><span>2022-01-29 15:26:02,590 INFO Welcome to fthread</span></span>
<span class="line"><span>Press &#39;tab&#39; to view autocompletions</span></span>
<span class="line"><span>Type &#39;.help&#39; for help</span></span>
<span class="line"><span>Type &#39;.quit&#39; or &#39;.exit&#39; to exit</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fthread&gt; f 3697-3706</span></span>
<span class="line"><span>freeze threads ....</span></span>
<span class="line"><span>freeze threads finish, succ cnt 10</span></span>
<span class="line"><span>fthread&gt; f 3836,3837</span></span>
<span class="line"><span>freeze threads ....</span></span>
<span class="line"><span>freeze threads finish, succ cnt 2</span></span>
<span class="line"><span>fthread&gt; list u</span></span>
<span class="line"><span>unfreeze  u</span></span>
<span class="line"><span>fthread&gt; list freezed</span></span>
<span class="line"><span>IDX      Thread Id        Status       Name</span></span>
<span class="line"><span>[2     ] 3697             * freezed    mysqld</span></span>
<span class="line"><span>[3     ] 3698             * freezed    mysqld</span></span>
<span class="line"><span>[4     ] 3699             * freezed    mysqld</span></span>
<span class="line"><span>[5     ] 3700             * freezed    mysqld</span></span>
<span class="line"><span>[6     ] 3701             * freezed    mysqld</span></span>
<span class="line"><span>[7     ] 3702             * freezed    mysqld</span></span>
<span class="line"><span>[8     ] 3703             * freezed    mysqld</span></span>
<span class="line"><span>[9     ] 3704             * freezed    mysqld</span></span>
<span class="line"><span>[10    ] 3705             * freezed    mysqld</span></span>
<span class="line"><span>[11    ] 3706             * freezed    mysqld</span></span>
<span class="line"><span>[14    ] 3836             * freezed    mysqld</span></span>
<span class="line"><span>[15    ] 3837             * freezed    mysqld</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fthread&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>fthread提供了自动补全的能力： <img src="`+d+'" alt="005_paused_mysqld.png" loading="lazy"></p><p>暂停完成后，htop中的线程状态： <img src="'+t+`" alt="007_paused_mysqld.png" loading="lazy"></p><h2 id="暂停线程的原理" tabindex="-1"><a class="header-anchor" href="#暂停线程的原理"><span>暂停线程的原理</span></a></h2><p>暂停线程的原理很简单，就是借助linux提供的ptrace系统调用：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &lt;sys/ptrace.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">long</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> ptrace</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">enum</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> __ptrace_request </span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> pid_t</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> pid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            void</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">addr</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">ptrace</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">PTRACE_ATTACH</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> pid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ptrace的说明如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span>The ptrace() system call provides a means by which one process</span></span>
<span class="line"><span>(the &quot;tracer&quot;) may observe and control the execution of another</span></span>
<span class="line"><span>process (the &quot;tracee&quot;), and examine and change the tracee&#39;s</span></span>
<span class="line"><span>memory and registers.  It is primarily used to implement</span></span>
<span class="line"><span>breakpoint debugging and system call tracing.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>A tracee first needs to be attached to the tracer.  Attachment</span></span>
<span class="line"><span>and subsequent commands are per thread: in a multithreaded</span></span>
<span class="line"><span>process, every thread can be individually attached to a</span></span>
<span class="line"><span>(potentially different) tracer, or left not attached and thus not</span></span>
<span class="line"><span>debugged.  Therefore, &quot;tracee&quot; always means &quot;(one) thread&quot;, never</span></span>
<span class="line"><span>&quot;a (possibly multithreaded) process&quot;.  Ptrace commands are always</span></span>
<span class="line"><span>sent to a specific tracee using a call of the form</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    ptrace(PTRACE_foo, pid, ...)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>where pid is the thread ID of the corresponding Linux thread.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当指定的线程被attach后，线程的执行就暂停了。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ul><li>[1] gdb手册 https://sourceware.org/gdb/onlinedocs/gdb/Attach.html</li><li>[2] fthread https://github.com/EmptyWatson/fthread</li><li>[3] ptrace 维基百科 https://en.wikipedia.org/wiki/Ptrace</li><li>[4] ptrace man https://man7.org/linux/man-pages/man2/ptrace.2.html</li></ul>`,44),o=[c];function b(h,m){return a(),n("div",null,o)}const v=s(r,[["render",b],["__file","linux_freeze_threads.html.vue"]]),f=JSON.parse('{"path":"/zh/posts/debug/user_space/linux_freeze_threads.html","title":"Linux上暂停指定的多个运行线程","lang":"zh-CN","frontmatter":{"date":"2022-02-02T00:00:00.000Z","category":["调试"],"tag":["线程","冻结","调试技巧","gdb","性能优化"],"description":"Linux上暂停指定的多个运行线程 开篇问题 有一个Linux的多线程程序，在某一台服务器上运行10天后，该程序进程产生了120个线程，此时业务的性能变得很差(可以容易获取业务性能表现的指标)。 我们检查了同时启动服务的其他10台服务器，这10台服务器的业务表现都正常。 我们使用了各种手段分析排查产生性能下降的原因，但没有找到。 不过经过对比，我们对其...","head":[["meta",{"property":"og:url","content":"https://emptywatson.github.io/zh/posts/debug/user_space/linux_freeze_threads.html"}],["meta",{"property":"og:site_name","content":"EmptyWatson Inside World"}],["meta",{"property":"og:title","content":"Linux上暂停指定的多个运行线程"}],["meta",{"property":"og:description","content":"Linux上暂停指定的多个运行线程 开篇问题 有一个Linux的多线程程序，在某一台服务器上运行10天后，该程序进程产生了120个线程，此时业务的性能变得很差(可以容易获取业务性能表现的指标)。 我们检查了同时启动服务的其他10台服务器，这10台服务器的业务表现都正常。 我们使用了各种手段分析排查产生性能下降的原因，但没有找到。 不过经过对比，我们对其..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-06-14T07:39:05.000Z"}],["meta",{"property":"article:author","content":"EmptyWatson"}],["meta",{"property":"article:tag","content":"线程"}],["meta",{"property":"article:tag","content":"冻结"}],["meta",{"property":"article:tag","content":"调试技巧"}],["meta",{"property":"article:tag","content":"gdb"}],["meta",{"property":"article:tag","content":"性能优化"}],["meta",{"property":"article:published_time","content":"2022-02-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-06-14T07:39:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Linux上暂停指定的多个运行线程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-02-02T00:00:00.000Z\\",\\"dateModified\\":\\"2024-06-14T07:39:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"EmptyWatson\\",\\"url\\":\\"https://emptywatson.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"开篇问题","slug":"开篇问题","link":"#开篇问题","children":[]},{"level":2,"title":"问题跟踪思路","slug":"问题跟踪思路","link":"#问题跟踪思路","children":[]},{"level":2,"title":"使用gdb暂停指定的几个线程","slug":"使用gdb暂停指定的几个线程","link":"#使用gdb暂停指定的几个线程","children":[]},{"level":2,"title":"使用fthread暂停指定线程","slug":"使用fthread暂停指定线程","link":"#使用fthread暂停指定线程","children":[{"level":3,"title":"fthread简介","slug":"fthread简介","link":"#fthread简介","children":[]},{"level":3,"title":"获取fthread","slug":"获取fthread","link":"#获取fthread","children":[]},{"level":3,"title":"使用fthread","slug":"使用fthread","link":"#使用fthread","children":[]}]},{"level":2,"title":"暂停线程的原理","slug":"暂停线程的原理","link":"#暂停线程的原理","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1718342765000,"updatedTime":1718350745000,"contributors":[{"name":"cric_li","email":"1424599184@qq.com","commits":2}]},"readingTime":{"minutes":7.83,"words":2349},"filePathRelative":"zh/posts/debug/user_space/linux_freeze_threads.md","localizedDate":"2022年2月2日","excerpt":"\\n<h2>开篇问题</h2>\\n<p>有一个Linux的多线程程序，在某一台服务器上运行10天后，该程序进程产生了120个线程，此时业务的性能变得很差(可以容易获取业务性能表现的指标)。\\n我们检查了同时启动服务的其他10台服务器，这10台服务器的业务表现都正常。\\n我们使用了各种手段分析排查产生性能下降的原因，但没有找到。\\n不过经过对比，我们对其中一个业务产生了比较大的怀疑，这个业务本身很独立，别的流程对它没有依赖。\\n我们怀疑这个业务的线程运行过程中执行了某些特殊代码，对系统整体性能产生了影响。\\n这个业务一共启动了12个线程，而且这个业务也没有运行时开关。\\n但是我们不能重启程序，因为担心无法复现问题。\\n现在，怎么来确认这个怀疑是对的还是错的？</p>","autoDesc":true}');export{v as comp,f as data};
